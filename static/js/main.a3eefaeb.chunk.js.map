{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["allowedCharactersValues","propsMap","alpha","type","inputMode","pattern","alphanumeric","numeric","min","max","forwardRef","allowedCharacters","autoFocus","isPassword","length","onChange","isNaN","Error","value","inputsRef","useRef","inputProps","useImperativeHandle","ref","focus","clear","i","sendResult","useEffect","res","input","handleOnChange","e","target","nextElementSibling","handleOnKeyDown","key","t","handleOnFocus","handleOnPaste","pastedValue","currentInput","pastedCharacter","currentValue","inputs","onKeyDown","onFocus","onPaste","el","maxLength","className","inputClassName","autoComplete","ariaLabel","disabled","placeholder","containerClassName","allowedCharactersMap","id","name","App","AuthInputRef","useState","result","setResult","setIsPassword","setDisabled","setAllowedCharacters","handleAllowedCharactersChange","currentTarget","alt","src","href","checked","htmlFor","onClick","current","map","aC","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3eefaeb.chunk.js","sourcesContent":["import React, {\n  useRef,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\n\nconst allowedCharactersValues = ['alpha', 'numeric', 'alphanumeric'] as const;\n\nexport type AuthCodeProps = {\n  allowedCharacters?: typeof allowedCharactersValues[number];\n  ariaLabel?: string;\n  autoFocus?: boolean;\n  containerClassName?: string;\n  disabled?: boolean;\n  inputClassName?: string;\n  isPassword?: boolean;\n  length?: number;\n  placeholder?: string;\n  onChange: (res: string) => void;\n};\n\ntype InputMode = 'text' | 'numeric';\n\ntype InputType = 'text' | 'tel' | 'password';\n\ntype InputProps = {\n  type: InputType;\n  inputMode: InputMode;\n  pattern: string;\n  min?: string;\n  max?: string;\n};\n\nexport type AuthCodeRef = {\n  focus: () => void;\n  clear: () => void;\n};\n\nconst propsMap: { [key: string]: InputProps } = {\n  alpha: {\n    type: 'text',\n    inputMode: 'text',\n    pattern: '[a-zA-Z]{1}'\n  },\n\n  alphanumeric: {\n    type: 'text',\n    inputMode: 'text',\n    pattern: '[a-zA-Z0-9]{1}'\n  },\n\n  numeric: {\n    type: 'tel',\n    inputMode: 'numeric',\n    pattern: '[0-9]{1}',\n    min: '0',\n    max: '9'\n  }\n};\n\nconst AuthCode = forwardRef<AuthCodeRef, AuthCodeProps>(\n  (\n    {\n      allowedCharacters = 'alphanumeric',\n      ariaLabel,\n      autoFocus = true,\n      containerClassName,\n      disabled,\n      inputClassName,\n      isPassword = false,\n      length = 6,\n      placeholder,\n      onChange\n    },\n    ref\n  ) => {\n    if (isNaN(length) || length < 1) {\n      throw new Error('Length should be a number and greater than 0');\n    }\n\n    if (!allowedCharactersValues.some((value) => value === allowedCharacters)) {\n      throw new Error(\n        'Invalid value for allowedCharacters. Use alpha, numeric, or alphanumeric'\n      );\n    }\n\n    const inputsRef = useRef<Array<HTMLInputElement>>([]);\n    const inputProps = propsMap[allowedCharacters];\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (inputsRef.current) {\n          inputsRef.current[0].focus();\n        }\n      },\n      clear: () => {\n        if (inputsRef.current) {\n          for (let i = 0; i < inputsRef.current.length; i++) {\n            inputsRef.current[i].value = '';\n          }\n          inputsRef.current[0].focus();\n        }\n        sendResult();\n      }\n    }));\n\n    useEffect(() => {\n      if (autoFocus) {\n        inputsRef.current[0].focus();\n      }\n    }, []);\n\n    const sendResult = () => {\n      const res = inputsRef.current.map((input) => input.value).join('');\n      onChange && onChange(res);\n    };\n\n    const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {\n        target: { value, nextElementSibling }\n      } = e;\n      if (value.length > 1) {\n        e.target.value = value.charAt(0);\n        if (nextElementSibling !== null) {\n          (nextElementSibling as HTMLInputElement).focus();\n        }\n      } else {\n        if (value.match(inputProps.pattern)) {\n          if (nextElementSibling !== null) {\n            (nextElementSibling as HTMLInputElement).focus();\n          }\n        } else {\n          e.target.value = '';\n        }\n      }\n      sendResult();\n    };\n\n    const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = e;\n      const target = e.target as HTMLInputElement;\n      if (key === 'Backspace') {\n        if (target.value === '') {\n          if (target.previousElementSibling !== null) {\n            const t = target.previousElementSibling as HTMLInputElement;\n            t.value = '';\n            t.focus();\n            e.preventDefault();\n          }\n        } else {\n          target.value = '';\n        }\n        sendResult();\n      }\n    };\n\n    const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n      e.target.select();\n    };\n\n    const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n      const pastedValue = e.clipboardData.getData('Text');\n\n      let currentInput = 0;\n\n      for (let i = 0; i < pastedValue.length; i++) {\n        const pastedCharacter = pastedValue.charAt(i);\n        const currentValue = inputsRef.current[currentInput].value;\n        if (pastedCharacter.match(inputProps.pattern)) {\n          if (!currentValue) {\n            inputsRef.current[currentInput].value = pastedCharacter;\n            if (inputsRef.current[currentInput].nextElementSibling !== null) {\n              (inputsRef.current[currentInput]\n                .nextElementSibling as HTMLInputElement).focus();\n              currentInput++;\n            }\n          }\n        }\n      }\n      sendResult();\n\n      e.preventDefault();\n    };\n\n    const inputs = [];\n    for (let i = 0; i < length; i++) {\n      inputs.push(\n        <input\n          key={i}\n          onChange={handleOnChange}\n          onKeyDown={handleOnKeyDown}\n          onFocus={handleOnFocus}\n          onPaste={handleOnPaste}\n          {...inputProps}\n          type={isPassword ? 'password' : inputProps.type}\n          ref={(el: HTMLInputElement) => {\n            inputsRef.current[i] = el;\n          }}\n          maxLength={1}\n          className={inputClassName}\n          autoComplete={i === 0 ? 'one-time-code' : 'off'}\n          aria-label={\n            ariaLabel\n              ? `${ariaLabel}. Character ${i + 1}.`\n              : `Character ${i + 1}.`\n          }\n          disabled={disabled}\n          placeholder={placeholder}\n        />\n      );\n    }\n\n    return <div className={containerClassName}>{inputs}</div>;\n  }\n);\n\nexport default AuthCode;\n","import React, { useRef, useState } from 'react';\n\nimport AuthCode, { AuthCodeRef, AuthCodeProps } from 'react-auth-code-input';\nimport './index.css';\n\nconst allowedCharactersMap = [\n  { id: 'alphanumeric', name: 'Letters & Numbers' },\n  { id: 'alpha', name: 'Only Letters' },\n  { id: 'numeric', name: 'Only Numbers' }\n];\n\nconst App = () => {\n  const AuthInputRef = useRef<AuthCodeRef>(null);\n  const [result, setResult] = useState<string>('');\n  const [isPassword, setIsPassword] = useState<boolean>(false);\n  const [disabled, setDisabled] = useState<boolean>(false);\n  const [allowedCharacters, setAllowedCharacters] = useState<\n    AuthCodeProps['allowedCharacters']\n  >('alphanumeric');\n  const handleOnChange = (res: string) => {\n    setResult(res);\n  };\n\n  const handleAllowedCharactersChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const { id } = e.currentTarget;\n    // @ts-ignore\n    setAllowedCharacters(id);\n    setResult('');\n  };\n\n  return (\n    <div className='main'>\n      <h1>React Auth Code Input</h1>\n      <p>One-time password (OTP) React component.</p>\n      <div className='badges'>\n        <img\n          alt=''\n          src='https://img.shields.io/npm/v/react-auth-code-input.svg'\n        />\n        <img\n          alt='code style standard'\n          src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n        />\n        <img\n          alt='license MIT'\n          src='https://img.shields.io/badge/license-MIT-brightgreen.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dt/react-auth-code-input.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dw/react-auth-code-input.svg'\n        />\n      </div>\n      <p>\n        <a href='https://github.com/drac94/react-auth-code-input'>\n          View documentation on GitHub\n        </a>\n      </p>\n      <div>\n        <div>\n          <h1>\n            Two-Factor\n            <br /> Authentication\n          </h1>\n          <AuthCode\n            key={allowedCharacters}\n            allowedCharacters={allowedCharacters}\n            ref={AuthInputRef}\n            onChange={handleOnChange}\n            containerClassName='container'\n            inputClassName='input'\n            isPassword={isPassword}\n            disabled={disabled}\n          />\n          <p>\n            A message with a verification code has been sent to <br />\n            your devices. Enter the code to continue.\n          </p>\n          <p>Code: {result}</p>\n          <div className='props'>\n            <div className='options'>\n              <div>\n                <input\n                  type='checkbox'\n                  id='isPassword'\n                  name='isPassword'\n                  onChange={(e) => setIsPassword(e.target.checked)}\n                />\n                <label htmlFor='isPassword'>Password</label>\n              </div>\n              <div>\n                <input\n                  type='checkbox'\n                  id='disabled'\n                  name='disabled'\n                  onChange={(e) => setDisabled(e.target.checked)}\n                />\n                <label htmlFor='disabled'>Disabled</label>\n              </div>\n              <button onClick={() => AuthInputRef.current?.focus()}>\n                Focus\n              </button>\n              <button onClick={() => AuthInputRef.current?.clear()}>\n                Clear\n              </button>\n            </div>\n            <div className='allowed-characters'>\n              {allowedCharactersMap.map((aC) => (\n                <div key={aC.id}>\n                  <input\n                    type='radio'\n                    id={aC.id}\n                    name='allowedRadio'\n                    onChange={handleAllowedCharactersChange}\n                    checked={allowedCharacters === aC.id}\n                  />\n                  <label htmlFor={aC.id}>{aC.name}</label>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}